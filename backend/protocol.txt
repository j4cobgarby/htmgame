LOBBY state:
    ### Connecting to server
    client -> server: connect
    server -> client: 
        on success:
        {
            status: 1,
            action: 'join_success'
        }
        on failure:
        {
            status: 0,
            message: 'join_failure'
        }

    ### Configuring name and class
    client -> server:
        {
            action: 'configure',
            options: {
                'name': <desired name>,
                'playerclass': <desired class id>
            }
        }
    server -> client:
        {
            status: 1 OR 0,
            action: 'configured' OR 'invalid_class'
        }

    ### Starting the game

    client -> server:
        {
            action: 'start_game'
        }
    server -> client:
        {
            status: 1,
            action: 'starting_game'
        }

PRESENT_ROOM state:
    server -> client:
        {
            'action': 'room_description',
            'description': <description of room>,
            'description_id': <description number>,
            'feature': <feature of room>,
            'feature_id': <feature number>
        }

SUBMIT_ANSWERS state:

    server -> client:
        {
            'action': 'request_answers'
        }
    client -> server:
        {
            'action': 'send_answer',
            'message': <the answer that the user typed>
            'item_id': <b number>
        }
    server -> client:
        {
            'action': 'all_answers',
            'players':
            [
                {
                    'user': username,
                    'user_id': user_id,
                    'item': item_id,
                    'message': message
                },
            
            ]
        }

VOTING state:

    server -> client:
        {
            'action': 'request_votes'
        }
    client -> server:
        {
            'action': 'send_vote',
            'player': <integer id of player>
        }

CHOOSE_ITEMS state:
    server -> client:
        {
            'action': 'looting_begin'
        }

    server -> client:
        {
            'action': 'request_item_choice',
            'options': [
                {
                    'id': <item's ID>
                    'name':  <first item's name>,
                    'description': <first item's description>,
                    'adjectives': [<adj 1>, <adj 2>, etc...]
                },
                <rest of items here in list>
            ]
        }
    client -> server:
        {
            'action': 'choose_item',
            'choice': <id of item>
        }

    note: the server will ask each client in turn and wait for their response before asking the next. done in 
        order of who has most votes. if there are ties, randomise.

    server -> client:
        {
            'action': 'winner',
            'player': <id>
            'gold': <gold>
        }

Broker:
    POST ./broker/makecode:
        returns 
        {
            'code': 123456,
            'status': 1
        }
    
    POST ./broker/removecode/<code>:
        returns
        {
            'status': 1
        }
    if code not found
        {
            'status': 0
        }

    GET ./broker/getinfo/<code>
        returns
        {
            'time_create': 2022-01-01T00:59:59+UTC,
            'status': 1
        }
    if code not found
        {
            'status': 0
        }